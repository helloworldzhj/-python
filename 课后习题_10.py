#-*-coding:utf-8-*-

'''

0.列表可以存放可以存放已知的任何数据类型
1.list1.append()
list1.insert()
list1.extend()
2.append()是将参数作为一个元素添加到列表的末尾
就是吧元素append，那么列表最后就多了一个元素，把列表append那么列表最后就多了一个列表
extend()是将列表里面的元素拓展到列表的末尾。
把列表extend那么列表最后就多了列表里面的元素。
那么insert就是在指定位置插入元素的意思
name.insert(2,'s')








'''


'''
2.9.7

不一样
list[0]输出的是第0个元素
list[0:1]输出的是只含有第0个元素的列表

list1.insert(0,list1.pop())

正常索引是从左到右索引，负数索引是从右往左。



list1
list2=list1[:]
list3 = list1
表面上看list123都是一样的
但是实际上list2独立成为一个个体了
list3的话如果list1变化的话list3也还要变化，就是这样

list3是墙头草了，随着变化而变化。




'''




'''
#第12讲


[6]
#这个是错的，new保持不变的

list[1][2][0] = '小鱿鱼'


先对列表正向排序，再进行逆向排序
list.sort()
list.reverse()
或者：
list.sort(reverse=True)


列表还有两个内置方法没有介绍，
list2 = list1.copy()
这样就复制了一份list2

list2.clear()
这样就把列表清空了。
它变成了一个空的列表








list1=[]
for x in range(10):
	for y in range(10):
		if x%2==0 and y%2 !=0:
			list1.append((x,y))

print(list1)


list3 = [name + ':' + slogan[2:] for slogan in list1 for name in list2 ifslogan[0] == name[0]]


第13讲：
列表是一个大仓库，我们可以随时往里面添加东西
元组是封闭的列表，一旦定义，就不可以再改变了（不能添加删除修改之类的了）


当我们希望内容不被轻易修改的时候我们使用元组频繁修改数据就使用列表。


列表更好一点，列表提供了比元祖更丰富的内置方法，这相当大的提高了编程的灵活性。

所以一般情况下还是列表用得多

一个元组我们要在其中插入元素，怎么做呢？
temp = (‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘小布丁’)
 temp = temp[:2] + (‘怡静’,) + temp[2:]
 这样就在元组里面加入了一个新的元素了


所有的多对象的，逗号分隔的，没有明确用符号定义的这些集合默认的类型都是元祖，

>>> x, y, z = 1, 2, 3
>>> type(x)             print(type(x))
#这个是整型
>>> h = x, y, z
>>> type(h)             print(type(h))
#这个就是元组了

str1[16:29]
str1[-45:-32]
还可以使用str1[20,-36]






'''


'''
chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
nums = '0123456789'

passwd = input('请输入需要检查的密码组合：')
length = len(passwd)

while(passwd.isspace() or length==0):
	passwd = input('您的密码为空，或者空格，请重新输入:')
	length = len(passwd)

if length <= 8:
	flag_len = 1
elif 8<length<16:
	flag_len = 2
else:
	flag_len = 3
flag_con = 0

for each in passwd:
	if each in symbols:
		flag_con += 1
		break
for each in passwd:
	if each in chars:
		flag_con += 1
		break
for each in passwd:
	if each in nums:
		flag_con += 1

#while 1:
print("您的密码安全级别为：",end='')
if flag_len == 1 or flag_con ==1:
	print("低")
elif flag_len ==3 and flag_con ==3 and (passwd[0] in chars):
	print("高")
	print("请继续保持")
	#break
else:
	print("中")
print("请按一下方式提升密码安全级别：\n\
        \t1.密码必须由数字,字母及特殊字符三种组合\n\
		\t2.密码只能由字母开头\n\
		\t3.密码长度不能低于16位")




print("{{1}}".format("不打印","打印"))

print("{a} love {b}.{c}".format(a="I",b="FishC",c="com"))
#abc属于关键字参数
print("{0} love {1}.{2}".format("I","FishC","com"))
#012属于位置参数
print("{0}{1:.2f}".format('pi=',3.1415))



编写一个进制转换程序：




while 1:
	num = int(input('请输入一个整数'))
	print('十进制 ->十六进制：%d -> 0x%x' % (num,num))
	print('十进制 ->八进制：%d -> 0o%o' % (num,num))
	print('十进制 ->二进制：%d -> ' % num,bin(num))
	
	
	




q = True
while q:
	num = input('请输入一个整数（输入Q结束程序）：')
	if num != 'Q':
		num = int(num)
		print('十进制 ->十六进制：%d -> 0x%x' % (num, num))
		print('十进制 ->八进制：%d -> 0o%o' % (num, num))
		print('十进制 ->二进制：%d -> ' % num, bin(num))
	else:
		q = False




第16讲


我们根据列表元组和字符串的共同特点把他们三统称为序列。
因为他们有以下三个共同点：
1.都可以通过索引值来得到每一个元素
2.默认索引值是从0开始的(当然也包括负数索引)
3.可以通过分片的方法得到一个范围内的元素的集合
4.有很多共通的操作符(重复操作符、拼接操作符、成员关系操作符、)





list()把可迭代对象转换成列表
tuple()就是把可迭代对象转换成元组
str()把对象转换成字符串

temp = "I love fish c!"
list1 = list(temp)
print(list1)



迭代是什么呢？就是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或者结果。每一次对过程的重复被称为一次‘迭代’，二每一次迭代的结果会被用来作为下一次迭代的初始值。





name = input('请输入待查找的用户名：')
score = [['迷途', 85], ['黑夜', 80], ['小布丁', 65], ['福禄娃娃', 95], ['怡静', 90]]
IsFind = False

for each in score:
	if name in each:
		print(name + '的得分是：', each[1])
		IsFind = True
		break

if IsFind == False:
	print('查找的数据不存在！')


def min(x):
	least = x[0]
	for each in x:
		if each <least:
			least = each

	return least

print(min('123456789'))



def sum(x):
	result = 0
	for each in x:
		if (type(each)==int) or (type(each)==float):
			result += each
		else:
			continue
	return result




第17讲

dry是什么呢？
dry是程序员们的一句口头禅，就是Don't repeat yourself


我们最好还是使用函数
0.可以降低代码量。
1.可以降低维护成本。
2.更方便阅读。

函数理论上可以使用多个参数，不过不宜过多，多了容易出错。

def MyFun((x, y), (a, b)):
    return x * y - a * b
    这个函数是没有参数的，因为这样的写法是错误的！
    函数参数需要变量，而这儿使用元组的形式是不行的.

def fun(a,b):
	return a*b

print(fun(2,3))

所以上面的例子可以是这样：
def MyFun(x,y):
	return x[0]*x[1] - y[0]*y[1]
print(myFun([3,4],[1,2]))


def pow(x,y):
	result = 1
	for i in range(y):
		result *= x
	return result
print(pow(5,6))




def gcd(x,y):
	while y:
		t = x%y
		x=y
		y=t
	return x
print(gcd(8,12))

def Dec2Bin(dec):
	temp = []
	result = ''
	while dec:
		quo = dec % 2
		dec = dec //2
		temp.append(quo)
	while temp:
		result += str(temp.pop())
	return result
print(Dec2Bin(62))




第18讲
def MyFun(x):
	return x**3
y = 3
print(MyFun(y))

再这个函数里面，x是形参，y是实参
跟绝大多数编程语言一样，形参指的是函数的创建和定义过程中小括号里面的参数
实参指的是函数在调用过程中传递进去的参数

形参指的是函数创建或者定义的过程中括号中的参数，而实参指的是函数再调用过程中传递进去的参数



2.使用关键字参数，可以避免什么问题？
关键字参数，是指函数在调用的时候，带上参数的名字去指定调用的是哪个参数，从而可以不用按照参数的顺序调用函数
例子如下
def saySome(name,words):
	print(name + '->' + words)
	
saySome(words="让编程改变世界",name="小甲鱼")
使用关键字参数，可以有效避免因不小心搞乱参数的顺序导致的bug的出现

4.关键字参数是在函数调用的时候，通过参数名指定需要复制的参数，这样做就不怕因为搞不清参数的顺序而导致函数调用出错。而默认参数实在函数定义的过程中，为形参赋初值，当函数调用的时候，不传递实参，则默认使用形参的初始值替代。


def mFun(*param,base=3):
	result = 0
	for each in param:
		result += each
	result *= base
	print('结果是：',result)
mFun(1,2,3,4,5,base=5)



def Narcissus():
	for each in range(100,1000):
		temp = each
		sum = 0
		while temp:
			sum = sum+(temp%10)**3
			temp = temp//10
		if sum == each:
			print(each,end='\t')
print("所有的水仙花数为：",end='')
Narcissus()


def findStr(desStr,subStr):
	count = 0
	length = len(desStr)
	if subStr not in desStr:
		print('在目标字符串中未找到字符串！')
	else:
		for each1 in range(length-1):
			if desStr[each1]==subStr[0]:
				if desStr==subStr[1]:
					count += 1
					
		print('子字符串在目标字符串中共出现%d次。'%count)
		
desStr=input('请输入长字符串：')
subStr=input('请输入短字符串：')
findStr(desStr,subStr)



def next():
	print('next')
	pre()

def pre():
	print('pre')
next()
返回两个值


def hello():
	print('hello.world.')
如果函数没有使用return语句制定返回值，python也不是什么都不反悔的，它会返回一个None对象，所以python所有的函数都是有返回值的。

return可以返回多个不同类型的值吗？

可以的，默认使用逗号隔开，并且以元组的方式返回，你当然也可以用列表包含起来返回：
def fun():
	return 'caocacocoaoc' ,520,3.14,True
	#这便是默认使用元组的方式返回，
def fun2():
	return ['小甲鱼'，1314，5.12，False]
#这儿的话使用列表的方式返回了。













def fun(var):
	var = 1314
	print(var,end='')
var = 520
fun(var)
print(var)

var = 'Hi'
def fun1():
	global var
	var = 'baby '
	return fun2(var)
def fun2(var):
	var += 'i love you'
	fun3(var)
	return var
def fun3(var):
	var = '小甲鱼'

print(fun1())


#这边的话还是有需要注意的地方的，就是不到万不得已绝对不要使用全局变量，a)代码可读性变得很差b）代码安全性降低了


list1 = [1, 2, 3]
def funs():
	list1.append('a')
funs()
print(list1)






a = input('请输入你想说的话：')
list1 = list(a)
b = reversed(list1)
if list1 == list(b):
	print('yes')
else:
	print('no')




def palindrome(string):
	length = len(string)
	last = length-1
	length -= 1
	flag = 1
	for each in range(length):
		if string[each] != string[last]:
			flag = 0
		last -= 1
	if flag ==1:
		return 1
	else:
		return 0
string = input('请输入你想说的话：')
if palindrome(string)==1:
	print('yes')
else:
	print('no')
	


def fun(str1):
	a = len(str1)
	zimu = 0
	shuzi = 0
	kongge = 0
	qitazifu = 0
	for i in range(a):
		if str1[i].isalpha():
			zimu += 1
		elif str1[i].isdigit():
			shuzi += 1
		elif str1[i]==' ':
			kongge += 1
		else:
			qitazifu += 1
	print("共有%d个字符，英文字符%d 空格字符%d 数字字符%d 其他字符%d"%(a,zimu,kongge,shuzi,qitazifu))
stringw = 'fhjfgadfhdgf  sfhyu457265$@$%9  74562 6 746529&*^(*&^5  238 65  4^&$%*$*u5g43gg;'
fun(stringw)



第20讲

如果希望在函数中修改全局变量的值，应该使用global关键字


举一个例子



count = 5
def fun():
	global count
	count = 10
	print(count)
print(count)
fun()
print(count)
这样的话就是不管在函数里面还是函数外面都修改了变量的值




在嵌套的函数中，如果希望在内部函数修改外部函数的局部变量，应该使用nonlocal关键字

举个例子





def fun():
	x = 5
	def fun2():
		nonlocal x
		x *= x
		return x
	return fun2()
print(fun())
nonlocal适合是用在父函数里面定义的变量
先global再nonlocal是不行的

python函数可以嵌套，但是要注意访问的作用域问题
外部函数里面的内部函数只可以让外部函数使用
在函数外面也就是程序中是不可以使用的


外部函数和内部函数都同时定义了一个名字相同的变量这个时候外部函数的变量要被暂时屏蔽掉，先让内部函数的变量动起来，就是这样





def sout():
	def soin():
		print('good')
	return soin()
sout()

我们怎么访问soin()函数呢？就直接访问sout()函数就可以了。


def sout():
	def soin():
		print('good')
	return soin
sout()()
#这儿是跟上面的代码是不一样的。
#也可以这样

go = sout()
go()



def fun():
	x = 5
	def funy():
		nonlocal x
		x += 1
		return x
	return funy
a = fun()
print(a())
print(a())
print(a())
#这边的话主要是因为a = fun()这句话，只要a变量没有被重新复制，fun()就没有被释放，也就是说局部变量x没有被重新初始化。

20讲这边有两题没有做



第21讲


def fun_A(x,y=3):
	return x*y

lambda x,y=3:x*y


lambda x:x if x % 2 else None

def is_odd(x):
	if x % 2 == 0:
		return x
	else:
		return None
		

1.python在写一些执行脚本的时候，使用匿名函数就可以省下函数定义的过程，比如说我们只是需要些个简单的脚本来管理时间服务器，我们就不需要专门定义一个函数然后再写调用，使用匿名函数就可以使得代码更加精简。
2.对于一些比较抽象并且整个执行程序执行下来只需要调用一两次的函数，有时候给函数起名字比较头疼，使用匿名韩式就没必要起名字了。
3.简化代码可读性，由于普通的屌丝函数经常要跳到开头定义部分，使用匿名函数就省去这样的步骤。

print(list(filter(lambda n:not(n%3),range(1,100))))

接下来就是列表推导式：
print([i for i in range(1,100) if not(i%3)])

zip()函数又是什么呢？
就是这个样子：
print(list(zip([1,3,5,7,9],[2,4,6,8,10])))


print(list(map(lambda x,y :[x,y],[1,3,5,7,9],[2,4,6,8,10])))
#这样输出的是灵活多变的列表。





def make_repeat(n):
	return lambda s:s*n

double = make_repeat(2)
print(double(8))
print(double('FishC'))


第22讲
0.在编程上，递归表现为函数调用本身这么一个行为。
def fun(n):
	if n == 1:
		return 1
	else:
		return n*fun(n-1)
num = int(input("请输入一个整数："))
result = fun(num)
print("%d的阶乘是%d"%(num,result))


1.递归自身必须满足两个基本条件。
1.函数调用本身
2.设置了正确的返回条件。

2.在编程中有没有不得不使用递归的情况？
汉诺塔、目录索引(因为永远不知道目录里面是否还有目录)、快速排序(二十世纪十大算法之一)、树结构的定义，如果使用递归，事半功倍，否则会导致程序难以理解。



使用递归要谨慎，每次函数调用都要进行压栈，弹栈，保存，和恢复寄存器的操作，座椅要小心，非常消耗空间和时间的
还要注意递归返回的时机

递归的基本思想是把规模大的问题转变成规模小的问题，从而简化问题的解决难度










def power(x,y):
	if y > 0:
		return x * power(x,y-1)
	else:
		return 1

print(power(5,3))



def gcd(x,y):
	if y:
		return gcd(y,x%y)
	else:
		return x

print(gcd(4,8))


第23讲







def fun(dec):
	result = ''
	if dec:
		result = fun(dec//2)
		return result+str(dec//2)



#	对哦 ，return的东西可以多次变换，这样就比print好多了





result = []
def fun(n):
	if n > 0:
		result.insert(0,n%10)
		fun(n//10)
fun(12345)
print(result)



def fun(n,start,end):
	if start> end:
		return 1
	else:
		return fun(n,start+1,end-1) if n[start]==n[end] else 0
string=input('请输入字符串：')
length=len(string)-1
if fun(string,0,length):
	print('这句话是回文')
else:
	print('这句话不是')



def age(n):
	if n==1:
		return 10
	else:
		return age(n-1)+2

print('哈哈！我知道啦，第五个人的年龄是%d岁'% age(5) )

第25讲
0.当看到映射哈希散列或者关系数组的时候，他们就是在讨论 字典这个名词的东西，


1.mydict = dict((('F',70),('i',105),('s',115),('h',104),('C',67)))
print(mydict)
print(type(mydict))
print(mydict['C'])
mydict['name']

2.有时候我们使用大括号阔起来一些数据，并不表示他们就是字典，因为没有反映出里面数据之间的映射关系。

4.是的，他们都是在创建字典



data = "1000,小甲鱼，男"
print(data.split(','))


data = "1000,小甲鱼,男"
MyDict = {}
# 还记得字符串的分割方法吧，别学过就忘啦^_^
(MyDict['id'], MyDict['name'], MyDict['sex']) = data.split(',')

print("ID:   " + MyDict['id'])
print("Name: " + MyDict['name'])
print("Sex   " + MyDict['sex'])






print('欢迎来到通讯录系统！')
print('1.查询联系人资料！')
print('2.插入新的联系人！')
print('3.删除已有联系人！')
print('4.退出通讯录系统！')

contacts = dict()
while 1:
	instr = int(input('请输入你的意思：'))
	if instr == 1:
		name = input('请输入联系人姓名：')
		if name in contacts:
			print(name + ' + ' + contacts[name])
		else:
			print('没有你要找的人呢。。。')
	if instr == 2:
		name = input('请输入联系人姓名：')
		if name in contacts:
			print('通讯录里面已经有了。。。',end='')
			print(name + ' + ' + contacts[name])
			if input('是否修改用户资料（yes/no）：')=='yes':
				contacts[name]=input('请输入用户电话')
		else:
			contacts[name]=input('请输入用户联系电话')

	if instr==3:
		name = input('请输入联系人姓名：')
		if name in contacts:
			del(contacts[name])
		else:
			print('您输入的联系人不存在。')
	if instr==4:
		break
print('感谢您使用')


第26讲



python中不支持一键多值的,对相同的键再次赋值会直接覆盖的

在字典中试图为不存在的键赋值就会创建它，键值对

在字典中检查键是否存在比在序列中检查更加高效一点，因为字典的原理是使用哈希算法存储，一步到位不需要使用查找算法进行匹配，因此时间复杂度是O(1),效率非常高。

Python对键的要求相对来说严格一点，要求他们必须是可哈希的对象，不能是可变类型(包括变量列表，字典本身。)

dict是有formkeys这个属性的，这个属性是直接创建一个新的字典，不要试图使用它来修改原有的字典，因为他会直接无情的把整个字典覆盖掉



dict2 = dict1.copy()
如果是dict2 = dict1的话，就是简单的拷贝而已


尝试编写一个用户登陆程序（尝试把功能封装成函数）







user_data = []
def new_user():
	prompt = '请输入用户名：'
	while True:
		name = input(prompt)
		if name in user_data:
			prompt = "此用户名已被使用，请重新输入："
			continue
		else:
			break
	passwd = input('请输入密码：')
	user_data[name]=passwd
	print('注册成功，赶紧试试吧！')

def old_user():
	prompt='请输入用户名：'
	while True:
		name = input(prompt)
		if name not in user_data:
			prompt = "您输入的用户民不存在，请重新输入："
			continue
		else:
			break
	passwd = input("请输入密码：")
	pwd = user_data.get(name)
	if passwd ==pwd:
		print('欢迎进入系统，点击右上角的x来结束程序')
	else:
		print('密码错误')

def showmenu():
	prompt = '''


'''

|---新建用户：N/n---|
|---登录账号：E/e---|
|---退出程序：Q/q---|	
|---请输入指令代码：
	while True:
		chosen = False
		while not chosen:
			choice = input(prompt)
			if choice not in 'NnEeQq':
				print('您输入的指令代码有错误，请重新输入：')
			else:
				chosen = True
		if choice == 'q' or choice == 'Q':
			break
		if choice == 'n' or choice == 'N':
			new_user()
		if choice == 'e' or choice == 'E':
			old_user()

showmenu()







请问集合的唯一作用是什么呢？

集合几乎所有的作用就是确保包含的元素的唯一性，就像世界上没有两片完全相同的树叶一样，集合内不存在相同的元素。

如果希望创建的集合是不变的，用改使用frozenset()

请问如何确定一个集合里面有多少个元素呢？
wasd = set([1,2,3,4,5])
print(len(wasd))


wasd = set([1,2,3,4,5])
wasd[0]
这样的话是会报错的，因为集合是无序的

set1 = set([1,2])会生成一个集合
set1 = {[1,2]}会报错


在idle中输入set1={1，1.0}结果集合内容就是{1.0}因为在python的哈希函数会讲相同的值的元素计算得到相同的地址，所以1和1.0是等值的

集合中元素的添加和删除
add&remove



第28讲

b是错误的\n被看作是换行符 \t被看作是制表符

rt读模式默认打开模式，即刻度，文本的模式打开

2.xb的意思是。以“可写入以及二进制模式”打开文件
这里要注意的是x和w均是以“可写入”的模式打开文件，但以x模式打开的时候，如果路径下已经存在相同的文件名，会抛出异常。而w模式的话会直接覆盖同名文件。

因此，w模式打开文件会显得有些危险，容易导致此前的内容意识，因此使用w模式打开文件前先检查该文件是否已经存在显得非常重要！

python有垃圾收集机制，会在文件对象的引用计数降至0的时候自动关闭文件，所以在python编程里如果忘记关闭文件不会造成内存泄漏那么危险。
但是并不是说就可以不要关闭文件，如果对文件进行写入操作，那么应该在完成写入之后进行关闭文件。因为python可能会缓存你写入的数据，如果中间断了电这些缓存的数据就不会写入到文件中。所以为了安全起见，要养成使用完文件后立即关闭的习惯。


如何将一个文件对象f中的数据存放进列表中：
list(f) ,,,,,,,,,特别简单


如何迭代打印出文件对象f中的每一行数据？
直接使用for语句把文件对象打印出来即可：
for each_line in f:
	print(each_line)
	
	
文件对象的内置方法f.read([size=-1])的作用是读取文件对象内容，size参数是可选的，如果设置了size = 10，例如f.read(10)将返回从文件指针开始(注意这里并不是文件头哦)的连续10个字符。

如何获取文件对象f当前指针位置？
f.tell()会返回


f = open('OpenMe.mp3')
for each_line in f:
	print(each_line,end='')
f.close()

f1 = open('OpenMe.mp3')
f2 = open('OpenMe.txt','x')
f2.write(f1.read())
f2.close()
f1.close()



第29讲







'''
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































